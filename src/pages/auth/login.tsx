import type { GetServerSideProps } from "next";
import { getCsrfToken } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";

import { Raleway } from "@next/font/google";

const raleway = Raleway({ subsets: ["latin"] });

export default function SignIn({ csrfToken }: { csrfToken: string }) {
  return (
    <>
      <Head>
        <title>Sign In - IETP | HMS</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav className="navbar-expand-lg absolute top-0 z-50 flex w-full flex-wrap items-center justify-between px-2 py-3 shadow-sm">
        <div className="container mx-auto flex flex-wrap items-center justify-between px-4">
          <div className="relative flex w-full justify-between lg:static lg:block lg:w-auto lg:justify-start">
            <Link
              href="/"
              className="mr-4 inline-block whitespace-nowrap py-2 text-lg font-bold uppercase leading-relaxed tracking-wide text-gray-700"
            >
              IETP HMS
            </Link>
          </div>
        </div>
      </nav>
      <main className={raleway.className}>
        <section className="relative h-full min-h-screen w-full py-40">
          <div className="container mx-auto flex items-center justify-center">
            <div className="max-w-sm">
              <form
                method="POST"
                action="/api/auth/callback/credentials"
                className="mb-4 rounded bg-white px-8 pt-6 pb-8 shadow-md"
              >
                <input
                  name="csrfToken"
                  type="hidden"
                  defaultValue={csrfToken}
                />
                <div className="mb-3 text-center text-xl font-medium">
                  <small>Sign in with organizational credentials</small>
                </div>
                <div className="mb-4">
                  <label
                    className="mb-2 block text-sm font-bold text-gray-700"
                    htmlFor="email"
                  >
                    Email
                  </label>
                  <input
                    className="focus:shadow-outline w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
                    id="email"
                    name="email"
                    type="email"
                    placeholder="Email"
                  />
                </div>
                <div className="mb-6">
                  <label
                    className="mb-2 block text-sm font-bold text-gray-700"
                    htmlFor="password"
                  >
                    Password
                  </label>
                  <input
                    className="focus:shadow-outline mb-3 w-full appearance-none rounded border py-2 px-3 leading-tight text-gray-700 shadow focus:outline-none"
                    id="password"
                    name="password"
                    type="password"
                  />
                </div>
                <div className="mt-6 text-center">
                  <button
                    className="bg-blueGray-800 text-blueGray_600 active:bg-blueGray-600 mr-1 mb-1 w-full rounded px-6 py-3 text-sm font-bold uppercase shadow outline-none transition-all duration-150 ease-linear hover:shadow-lg focus:outline-none"
                    type="submit"
                  >
                    Sign In
                  </button>
                </div>
              </form>
              <footer>
                <p className="text-center text-xs text-gray-500">
                  &copy;2020 Acme Corp. All rights reserved.
                </p>
              </footer>
            </div>
          </div>

          {/* <FooterSmall absolute /> */}
        </section>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  return {
    props: {
      csrfToken: await getCsrfToken(context),
    },
  };
};
